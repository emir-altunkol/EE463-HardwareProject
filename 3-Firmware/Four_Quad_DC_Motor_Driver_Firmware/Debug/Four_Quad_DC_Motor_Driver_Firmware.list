
Four_Quad_DC_Motor_Driver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004728  08004728  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004728  08004728  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000010  08004740  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004740  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3f7  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  0002b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173fc  00000000  00000000  0002e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb79  00000000  00000000  00045d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008968b  00000000  00000000  0005288d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  000dbf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080046d8 	.word	0x080046d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080046d8 	.word	0x080046d8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fe8c 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f82e 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 fa2a 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000790:	f000 fa0a 	bl	8000ba8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000794:	f000 f902 	bl	800099c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000798:	f000 f884 	bl	80008a4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800079c:	f000 f9b6 	bl	8000b0c <MX_TIM4_Init>
  MX_ADC2_Init();
 80007a0:	f000 f8be 	bl	8000920 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&I_set, ADC_BUF_LEN);
 80007a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a8:	490b      	ldr	r1, [pc, #44]	; (80007d8 <main+0x58>)
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <main+0x5c>)
 80007ac:	f001 f966 	bl	8001a7c <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim4);
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x60>)
 80007b2:	f002 fffb 	bl	80037ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0x64>)
 80007b8:	f002 fff8 	bl	80037ac <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x64>)
 80007c0:	f003 f89e 	bl	8003900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007c4:	2104      	movs	r1, #4
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x64>)
 80007c8:	f003 f89a 	bl	8003900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007cc:	2108      	movs	r1, #8
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <main+0x64>)
 80007d0:	f003 f896 	bl	8003900 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x54>
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000118 	.word	0x20000118
 80007e4:	200000d0 	.word	0x200000d0

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2228      	movs	r2, #40	; 0x28
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 ff66 	bl	80046c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	2301      	movs	r3, #1
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000834:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f9c2 	bl	8002bc8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084a:	f000 fa5f 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fc2e 	bl	80030cc <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000876:	f000 fa49 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800087a:	2302      	movs	r3, #2
 800087c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800087e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000882:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fdca 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000892:	f000 fa3b 	bl	8000d0c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000896:	f002 fd03 	bl	80032a0 <HAL_RCC_EnableCSS>
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_ADC1_Init+0x74>)
 80008b6:	4a19      	ldr	r2, [pc, #100]	; (800091c <MX_ADC1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ADC1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_ADC1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ADC1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_ADC1_Init+0x74>)
 80008ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_ADC1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_ADC1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_ADC1_Init+0x74>)
 80008e2:	f000 fe3f 	bl	8001564 <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 fa0e 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80008f8:	2307      	movs	r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC1_Init+0x74>)
 8000902:	f001 fa8d 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800090c:	f000 f9fe 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000002c 	.word	0x2000002c
 800091c:	40012400 	.word	0x40012400

08000920 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_ADC2_Init+0x74>)
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MX_ADC2_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_ADC2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_ADC2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_ADC2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_ADC2_Init+0x74>)
 800094a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800094e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_ADC2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_ADC2_Init+0x74>)
 8000958:	2201      	movs	r2, #1
 800095a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_ADC2_Init+0x74>)
 800095e:	f000 fe01 	bl	8001564 <HAL_ADC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 f9d0 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800096c:	2301      	movs	r3, #1
 800096e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000970:	2301      	movs	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_ADC2_Init+0x74>)
 800097e:	f001 fa4f 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000988:	f000 f9c0 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000005c 	.word	0x2000005c
 8000998:	40012800 	.word	0x40012800

0800099c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b096      	sub	sp, #88	; 0x58
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2220      	movs	r2, #32
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fe77 	bl	80046c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009da:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009dc:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <MX_TIM1_Init+0x16c>)
 80009de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009ee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80009f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <MX_TIM1_Init+0x168>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a06:	483f      	ldr	r0, [pc, #252]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a08:	f002 fe80 	bl	800370c <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a12:	f000 f97b 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a20:	4619      	mov	r1, r3
 8000a22:	4838      	ldr	r0, [pc, #224]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a24:	f003 f9d4 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a2e:	f000 f96d 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a32:	4834      	ldr	r0, [pc, #208]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a34:	f002 ff0c 	bl	8003850 <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a3e:	f000 f965 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482c      	ldr	r0, [pc, #176]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a52:	f003 fd53 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a5c:	f000 f956 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	2360      	movs	r3, #96	; 0x60
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	481f      	ldr	r0, [pc, #124]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a86:	f003 f8e5 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a90:	f000 f93c 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000a9e:	f003 f8d9 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000aa8:	f000 f930 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000ab6:	f003 f8cd 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ac0:	f000 f924 	bl	8000d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 8000ad0:	2324      	movs	r3, #36	; 0x24
 8000ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000ae8:	f003 fd66 	bl	80045b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000af2:	f000 f90b 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM1_Init+0x168>)
 8000af8:	f000 fa1c 	bl	8000f34 <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3758      	adds	r7, #88	; 0x58
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000d0 	.word	0x200000d0
 8000b08:	40012c00 	.word	0x40012c00

08000b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <MX_TIM4_Init+0x98>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b50:	f002 fddc 	bl	800370c <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f8d7 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b6c:	f003 f930 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 f8c9 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_TIM4_Init+0x94>)
 8000b88:	f003 fcb8 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b92:	f000 f8bb 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000118 	.word	0x20000118
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200b      	movs	r0, #11
 8000bcc:	f001 fc01 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bd0:	200b      	movs	r0, #11
 8000bd2:	f001 fc1a 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT_D_GPIO_Port, GPIO_OUT_D_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2120      	movs	r1, #32
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c46:	f001 ff84 	bl	8002b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SOFT_ST_Pin */
  GPIO_InitStruct.Pin = SOFT_ST_Pin;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SOFT_ST_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c5e:	f001 fddd 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : GEN_MODE_Pin GPIO_IN_D_Pin */
  GPIO_InitStruct.Pin = GEN_MODE_Pin|GPIO_IN_D_Pin;
 8000c62:	2318      	movs	r3, #24
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c76:	f001 fdd1 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUT_D_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_D_Pin;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_OUT_D_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c92:	f001 fdc3 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f001 fb99 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	f001 fbb2 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	10110000 	.word	0x10110000

08000cbc <ADC1_Read>:

/* USER CODE BEGIN 4 */

uint16_t ADC1_Read()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Get ADC value
	HAL_ADC_Start(&hadc1);
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <ADC1_Read+0x24>)
 8000cc2:	f000 fd27 	bl	8001714 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <ADC1_Read+0x24>)
 8000ccc:	f000 fdd0 	bl	8001870 <HAL_ADC_PollForConversion>

	return HAL_ADC_GetValue(&hadc1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <ADC1_Read+0x24>)
 8000cd2:	f000 ffb1 	bl	8001c38 <HAL_ADC_GetValue>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000002c 	.word	0x2000002c

08000ce4 <ADC2_Read>:
uint16_t ADC2_Read()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// Get ADC value
	HAL_ADC_Start(&hadc2);
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <ADC2_Read+0x24>)
 8000cea:	f000 fd13 	bl	8001714 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000cee:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <ADC2_Read+0x24>)
 8000cf4:	f000 fdbc 	bl	8001870 <HAL_ADC_PollForConversion>

	return HAL_ADC_GetValue(&hadc2);
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <ADC2_Read+0x24>)
 8000cfa:	f000 ff9d 	bl	8001c38 <HAL_ADC_GetValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29b      	uxth	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000005c 	.word	0x2000005c

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x60>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_MspInit+0x60>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <HAL_ADC_MspInit+0x12c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d152      	bne.n	8000e42 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a42      	ldr	r2, [pc, #264]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = I_SET_Pin;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SET_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4835      	ldr	r0, [pc, #212]	; (8000eb0 <HAL_ADC_MspInit+0x134>)
 8000ddc:	f001 fd1e 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000de0:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <HAL_ADC_MspInit+0x13c>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e00:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e16:	f001 fb13 	bl	8002440 <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e20:	f7ff ff74 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e28:	621a      	str	r2, [r3, #32]
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_ADC_MspInit+0x138>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2012      	movs	r0, #18
 8000e36:	f001 facc 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e3a:	2012      	movs	r0, #18
 8000e3c:	f001 fae5 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e40:	e02e      	b.n	8000ea0 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_ADC_MspInit+0x140>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d129      	bne.n	8000ea0 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_ADC_MspInit+0x130>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <HAL_ADC_MspInit+0x134>)
 8000e8c:	f001 fcc6 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2012      	movs	r0, #18
 8000e96:	f001 fa9c 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f001 fab5 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40012400 	.word	0x40012400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	2000008c 	.word	0x2000008c
 8000eb8:	40020008 	.word	0x40020008
 8000ebc:	40012800 	.word	0x40012800

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <HAL_TIM_Base_MspInit+0x68>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10c      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eea:	e018      	b.n	8000f1e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_TIM_Base_MspInit+0x70>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d113      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201e      	movs	r0, #30
 8000f14:	f001 fa5d 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f18:	201e      	movs	r0, #30
 8000f1a:	f001 fa76 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40000800 	.word	0x40000800

08000f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_TIM_MspPostInit+0x8c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d131      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_TIM_MspPostInit+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM4_Pin|PWM6_Pin;
 8000f84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <HAL_TIM_MspPostInit+0x94>)
 8000f9a:	f001 fc3f 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin|PWM3_Pin|PWM5_Pin;
 8000f9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <HAL_TIM_MspPostInit+0x98>)
 8000fb4:	f001 fc32 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000fd4:	f002 f9ec 	bl	80033b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x8>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 fa87 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	// Enable soft start mode if it is the first time
	if(Soft_st_done == 0){
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <EXTI2_IRQHandler+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d127      	bne.n	8001080 <EXTI2_IRQHandler+0x5c>
		if(I_set > 3){
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <EXTI2_IRQHandler+0x6c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4917      	ldr	r1, [pc, #92]	; (8001094 <EXTI2_IRQHandler+0x70>)
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb52 	bl	80006e0 <__aeabi_fcmpgt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d009      	beq.n	8001056 <EXTI2_IRQHandler+0x32>
			Soft_st = 1;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <EXTI2_IRQHandler+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
			I_start = I_set;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <EXTI2_IRQHandler+0x6c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <EXTI2_IRQHandler+0x78>)
 800104e:	6013      	str	r3, [r2, #0]
			forward = 1;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <EXTI2_IRQHandler+0x7c>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
		}
		if(I_set < 3){
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <EXTI2_IRQHandler+0x6c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <EXTI2_IRQHandler+0x70>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fb21 	bl	80006a4 <__aeabi_fcmplt>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <EXTI2_IRQHandler+0x5c>
			Soft_st = 1;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <EXTI2_IRQHandler+0x74>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
			I_start = -I_set;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <EXTI2_IRQHandler+0x6c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <EXTI2_IRQHandler+0x78>)
 8001078:	6013      	str	r3, [r2, #0]
			forward = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <EXTI2_IRQHandler+0x7c>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOFT_ST_Pin);
 8001080:	2004      	movs	r0, #4
 8001082:	f001 fd7f 	bl	8002b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000188 	.word	0x20000188
 8001090:	20000174 	.word	0x20000174
 8001094:	40400000 	.word	0x40400000
 8001098:	20000184 	.word	0x20000184
 800109c:	20000198 	.word	0x20000198
 80010a0:	20000000 	.word	0x20000000

080010a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Channel1_IRQHandler+0x10>)
 80010aa:	f001 fa83 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000008c 	.word	0x2000008c

080010b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <ADC1_2_IRQHandler+0x14>)
 80010be:	f000 fdc7 	bl	8001c50 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <ADC1_2_IRQHandler+0x18>)
 80010c4:	f000 fdc4 	bl	8001c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000002c 	.word	0x2000002c
 80010d0:	2000005c 	.word	0x2000005c

080010d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

		if(tripped == 1){
 80010da:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <TIM4_IRQHandler+0x1d0>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d11f      	bne.n	8001122 <TIM4_IRQHandler+0x4e>
			duty = 0;
 80010e2:	4b71      	ldr	r3, [pc, #452]	; (80012a8 <TIM4_IRQHandler+0x1d4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

			if(I_sense_av < -0.5 || I_sense_av > 0.5){
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <TIM4_IRQHandler+0x1d8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fad7 	bl	80006a4 <__aeabi_fcmplt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <TIM4_IRQHandler+0x3c>
 80010fc:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <TIM4_IRQHandler+0x1d8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff faeb 	bl	80006e0 <__aeabi_fcmpgt>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <TIM4_IRQHandler+0x42>
				TIM1->CCR3 = 0;
 8001110:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <TIM4_IRQHandler+0x1dc>)
 8001112:	2200      	movs	r2, #0
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			Soft_st = 0;
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <TIM4_IRQHandler+0x1e0>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
			Soft_st_done = 2; // TRIPPED AT THIS POINT
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <TIM4_IRQHandler+0x1e4>)
 800111e:	2202      	movs	r2, #2
 8001120:	601a      	str	r2, [r3, #0]
		}

		// ------------ ADC READING ---------------- //
		// Check if generator mode
		Gen_mode = HAL_GPIO_ReadPin(GPIOA, GEN_MODE_Pin);
 8001122:	2108      	movs	r1, #8
 8001124:	4865      	ldr	r0, [pc, #404]	; (80012bc <TIM4_IRQHandler+0x1e8>)
 8001126:	f001 fcfd 	bl	8002b24 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <TIM4_IRQHandler+0x1ec>)
 8001130:	601a      	str	r2, [r3, #0]

		// Read the ADCs by creating a ring buffer
		if(adc_ctr == ADC_AVE_SAMPLE){
 8001132:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <TIM4_IRQHandler+0x1f0>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d102      	bne.n	8001140 <TIM4_IRQHandler+0x6c>
			adc_ctr = 0;
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <TIM4_IRQHandler+0x1f0>)
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]

		}
		adc_buf_sense[adc_ctr] = ADC2_Read();
 8001140:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <TIM4_IRQHandler+0x1f0>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461c      	mov	r4, r3
 8001146:	f7ff fdcd 	bl	8000ce4 <ADC2_Read>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <TIM4_IRQHandler+0x1f4>)
 8001150:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		adc_buf_set[adc_ctr] = ADC1_Read();
 8001154:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <TIM4_IRQHandler+0x1f0>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	461c      	mov	r4, r3
 800115a:	f7ff fdaf 	bl	8000cbc <ADC1_Read>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <TIM4_IRQHandler+0x1f8>)
 8001164:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

		// Momentary values, in Amps
		I_sense = (30/4096)*(adc_buf_sense[adc_ctr] - 2048);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <TIM4_IRQHandler+0x1fc>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
		I_sense_temp = (30/4096)*(adc_buf_sense[(adc_ctr+1)%ADC_AVE_SAMPLE] - 2048);
 8001170:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <TIM4_IRQHandler+0x200>)
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
		I_set = (30/4096)*adc_buf_set[adc_ctr];
 8001178:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <TIM4_IRQHandler+0x204>)
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
		I_set_temp = (30/4096)*adc_buf_set[(adc_ctr+1)%ADC_AVE_SAMPLE];
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <TIM4_IRQHandler+0x208>)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

		// Moving averages, in Amps
		I_sense_av = I_sense_av + (I_sense - I_sense_temp)/ADC_AVE_SAMPLE;
 8001188:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <TIM4_IRQHandler+0x1fc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <TIM4_IRQHandler+0x200>)
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7fe ffde 	bl	8000154 <__aeabi_fsub>
 8001198:	4603      	mov	r3, r0
 800119a:	4951      	ldr	r1, [pc, #324]	; (80012e0 <TIM4_IRQHandler+0x20c>)
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f997 	bl	80004d0 <__aeabi_fdiv>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <TIM4_IRQHandler+0x1d8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f7fe ffd3 	bl	8000158 <__addsf3>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <TIM4_IRQHandler+0x1d8>)
 80011b8:	601a      	str	r2, [r3, #0]
		I_set_av = I_set_av + (I_set - I_set_temp)/ADC_AVE_SAMPLE;
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <TIM4_IRQHandler+0x204>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a47      	ldr	r2, [pc, #284]	; (80012dc <TIM4_IRQHandler+0x208>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7fe ffc5 	bl	8000154 <__aeabi_fsub>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4944      	ldr	r1, [pc, #272]	; (80012e0 <TIM4_IRQHandler+0x20c>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f97e 	bl	80004d0 <__aeabi_fdiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <TIM4_IRQHandler+0x210>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f7fe ffba 	bl	8000158 <__addsf3>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <TIM4_IRQHandler+0x210>)
 80011ea:	601a      	str	r2, [r3, #0]
		// ----------------------------------------- //


		/* EYVAH DEVREM YANIYOR MODU */
		/* (MOSFETs GG, reset the controller?) */
		if(I_sense_av > MAX_ARMATURE_CURRENT){
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TIM4_IRQHandler+0x1d8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	493d      	ldr	r1, [pc, #244]	; (80012e8 <TIM4_IRQHandler+0x214>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fa74 	bl	80006e0 <__aeabi_fcmpgt>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <TIM4_IRQHandler+0x13e>
			duty = 0;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <TIM4_IRQHandler+0x1d4>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = 3600;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <TIM4_IRQHandler+0x1dc>)
 8001206:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
			tripped = 1;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <TIM4_IRQHandler+0x1d0>)
 800120e:	2201      	movs	r2, #1
 8001210:	801a      	strh	r2, [r3, #0]
		}

		// TODO: Safety feature for generating mode switch is to be added
		if(Gen_mode == 0){
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <TIM4_IRQHandler+0x1ec>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f040 80f2 	bne.w	8001400 <TIM4_IRQHandler+0x32c>



			/* Coefficient saturation (to be edited) */
			if(Kp > 1)
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <TIM4_IRQHandler+0x218>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d902      	bls.n	800122a <TIM4_IRQHandler+0x156>
				Kp=1;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <TIM4_IRQHandler+0x218>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
			if(Kd > 1){
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <TIM4_IRQHandler+0x21c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d902      	bls.n	8001238 <TIM4_IRQHandler+0x164>
				Kd=0;}
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <TIM4_IRQHandler+0x21c>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
			if(Ki > 0){
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <TIM4_IRQHandler+0x220>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <TIM4_IRQHandler+0x172>
				Ki=0;}
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <TIM4_IRQHandler+0x220>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

			/* Do the soft start according to the set value*/
			if(Soft_st == 1){
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <TIM4_IRQHandler+0x1e0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d158      	bne.n	8001300 <TIM4_IRQHandler+0x22c>
				start_count = start_count + 1;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <TIM4_IRQHandler+0x224>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ff7e 	bl	8000158 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <TIM4_IRQHandler+0x224>)
 8001262:	601a      	str	r2, [r3, #0]
				duty = start_count/100;
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <TIM4_IRQHandler+0x224>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	491d      	ldr	r1, [pc, #116]	; (80012e0 <TIM4_IRQHandler+0x20c>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f930 	bl	80004d0 <__aeabi_fdiv>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa64 	bl	8000740 <__aeabi_f2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <TIM4_IRQHandler+0x1d4>)
 800127c:	6013      	str	r3, [r2, #0]
				if(I_sense == I_start){
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <TIM4_IRQHandler+0x1fc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <TIM4_IRQHandler+0x228>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa01 	bl	8000690 <__aeabi_fcmpeq>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8097 	beq.w	80013c4 <TIM4_IRQHandler+0x2f0>
					Soft_st_done = 1;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <TIM4_IRQHandler+0x1e4>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
					Soft_st = 0;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <TIM4_IRQHandler+0x1e0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e08f      	b.n	80013c4 <TIM4_IRQHandler+0x2f0>
 80012a4:	2000033a 	.word	0x2000033a
 80012a8:	2000018c 	.word	0x2000018c
 80012ac:	200001a0 	.word	0x200001a0
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	20000184 	.word	0x20000184
 80012b8:	20000188 	.word	0x20000188
 80012bc:	40010800 	.word	0x40010800
 80012c0:	20000180 	.word	0x20000180
 80012c4:	20000338 	.word	0x20000338
 80012c8:	20000270 	.word	0x20000270
 80012cc:	200001a8 	.word	0x200001a8
 80012d0:	20000170 	.word	0x20000170
 80012d4:	200001a4 	.word	0x200001a4
 80012d8:	20000174 	.word	0x20000174
 80012dc:	2000017c 	.word	0x2000017c
 80012e0:	42c80000 	.word	0x42c80000
 80012e4:	20000178 	.word	0x20000178
 80012e8:	41880000 	.word	0x41880000
 80012ec:	20000160 	.word	0x20000160
 80012f0:	20000164 	.word	0x20000164
 80012f4:	20000168 	.word	0x20000168
 80012f8:	2000019c 	.word	0x2000019c
 80012fc:	20000198 	.word	0x20000198
			/* PID implementation */
			else{
				/* f = 1/(delta_t) = 72MHz/1000 = 72kHz */
				/* SYSCLK/ARR - Write this in a better format !!!!!!!!!!!!!!!!!!!!!!!!!!  */

				float prop_error = I_set_av - I_sense;
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <TIM4_IRQHandler+0x344>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <TIM4_IRQHandler+0x348>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff22 	bl	8000154 <__aeabi_fsub>
 8001310:	4603      	mov	r3, r0
 8001312:	607b      	str	r3, [r7, #4]
				float der_error = (prop_error-pre_prop_error)/delta_t;
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <TIM4_IRQHandler+0x34c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7fe ff1a 	bl	8000154 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <TIM4_IRQHandler+0x350>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	603b      	str	r3, [r7, #0]
				int_error = int_error + prop_error*delta_t;
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <TIM4_IRQHandler+0x350>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f814 	bl	8000368 <__aeabi_fmul>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <TIM4_IRQHandler+0x354>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f7fe ff04 	bl	8000158 <__addsf3>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <TIM4_IRQHandler+0x354>)
 8001356:	601a      	str	r2, [r3, #0]

				pre_prop_error = prop_error;
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <TIM4_IRQHandler+0x34c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]

				/* Set the duty (only proportional implemented for now) */
				// duty = (int)(Kp*prop_error+Kd*der_error+Ki*int_error);
				duty = (int)(Kp*prop_error);
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <TIM4_IRQHandler+0x358>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ffa8 	bl	80002b8 <__aeabi_ui2f>
 8001368:	4603      	mov	r3, r0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f7fe fffb 	bl	8000368 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f9bd 	bl	80006f4 <__aeabi_f2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <TIM4_IRQHandler+0x35c>)
 8001380:	601a      	str	r2, [r3, #0]

				/* Set the duty if the motor still operates in the same region */
				if(forward == 1 && duty > 0){
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <TIM4_IRQHandler+0x360>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d116      	bne.n	80013b8 <TIM4_IRQHandler+0x2e4>
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <TIM4_IRQHandler+0x35c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d012      	beq.n	80013b8 <TIM4_IRQHandler+0x2e4>
					// nothing to do?
					if(I_sense_av < 0){
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <TIM4_IRQHandler+0x364>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f982 	bl	80006a4 <__aeabi_fcmplt>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <TIM4_IRQHandler+0x2dc>
						// Activate chopper
						TIM1->CCR3 = 3600; // Q5 is on (chopper)
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <TIM4_IRQHandler+0x368>)
 80013a8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80013ac:	63da      	str	r2, [r3, #60]	; 0x3c
					if(I_sense_av < 0){
 80013ae:	e009      	b.n	80013c4 <TIM4_IRQHandler+0x2f0>
					}
					else{
						// Deactivate chopper
						TIM1->CCR3 = 0; // Q5 is off (chopper)
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <TIM4_IRQHandler+0x368>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c
					if(I_sense_av < 0){
 80013b6:	e005      	b.n	80013c4 <TIM4_IRQHandler+0x2f0>
						TIM1->CCR3 = 0; // Q5 is off (chopper)
					}
				}
				// Stop the motor otherwise
				else{
					duty = 0;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <TIM4_IRQHandler+0x35c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
					Soft_st_done = 0;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <TIM4_IRQHandler+0x36c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
				}
			}

			/* Limit the duty */
			if(duty > 3300){
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <TIM4_IRQHandler+0x35c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d903      	bls.n	80013d8 <TIM4_IRQHandler+0x304>
				duty = 3300;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <TIM4_IRQHandler+0x35c>)
 80013d2:	f640 42e4 	movw	r2, #3300	; 0xce4
 80013d6:	601a      	str	r2, [r3, #0]
			if(duty < 0){
				duty = 0;
			}

			// H-Bridge implementation
			if(forward == 1){
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <TIM4_IRQHandler+0x360>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <TIM4_IRQHandler+0x31c>
				TIM1->CCR1 = duty; // Q1 is on for duty
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <TIM4_IRQHandler+0x368>)
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <TIM4_IRQHandler+0x35c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6353      	str	r3, [r2, #52]	; 0x34
				TIM1->CCR2 = 0; // Q3 is off, Q4 is on
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <TIM4_IRQHandler+0x368>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
 80013ee:	e00b      	b.n	8001408 <TIM4_IRQHandler+0x334>
			}
			else{
				TIM1->CCR1 = 0; // Q1 is off, Q2 is on
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <TIM4_IRQHandler+0x368>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty; // Q3 is on for duty
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <TIM4_IRQHandler+0x368>)
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <TIM4_IRQHandler+0x35c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6393      	str	r3, [r2, #56]	; 0x38
 80013fe:	e003      	b.n	8001408 <TIM4_IRQHandler+0x334>
		}

		// If the generator mode is on
		else{
			// IMPORTANT: CHOPPER MOSFET IS CONNECTED TO LOW SIDE
			TIM1->CCR3 = 3600; // Q5 is on (chopper)
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <TIM4_IRQHandler+0x368>)
 8001402:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c


		}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001408:	480e      	ldr	r0, [pc, #56]	; (8001444 <TIM4_IRQHandler+0x370>)
 800140a:	f002 fb1b 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000178 	.word	0x20000178
 800141c:	20000170 	.word	0x20000170
 8001420:	20000190 	.word	0x20000190
 8001424:	2000016c 	.word	0x2000016c
 8001428:	20000194 	.word	0x20000194
 800142c:	20000160 	.word	0x20000160
 8001430:	2000018c 	.word	0x2000018c
 8001434:	20000000 	.word	0x20000000
 8001438:	200001a0 	.word	0x200001a0
 800143c:	40012c00 	.word	0x40012c00
 8001440:	20000188 	.word	0x20000188
 8001444:	20000118 	.word	0x20000118

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	; (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147a:	f7ff ffe5 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f003 f8ff 	bl	8004680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff f97d 	bl	8000780 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001490:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 8001494:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001498:	20000340 	.word	0x20000340

0800149c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <CAN1_RX1_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 ff83 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fc2c 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 ff9b 	bl	8002426 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 ff63 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000004 	.word	0x20000004
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000000c 	.word	0x2000000c
 800154c:	2000033c 	.word	0x2000033c

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	2000033c 	.word	0x2000033c

08001564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0be      	b.n	8001704 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fbea 	bl	8000d7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fd8b 	bl	80020c4 <ADC_ConversionStop_Disable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8099 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8095 	bne.w	80016f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015d0:	f023 0302 	bic.w	r3, r3, #2
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b1b      	ldrb	r3, [r3, #12]
 80015ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_Init+0xa2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <HAL_ADC_Init+0xa8>
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	e000      	b.n	800160e <HAL_ADC_Init+0xaa>
 800160c:	2300      	movs	r3, #0
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7d1b      	ldrb	r3, [r3, #20]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d119      	bne.n	8001650 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	3b01      	subs	r3, #1
 800162a:	035a      	lsls	r2, r3, #13
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e00b      	b.n	8001650 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_ADC_Init+0x1a8>)
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	430b      	orrs	r3, r1
 8001676:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001680:	d003      	beq.n	800168a <HAL_ADC_Init+0x126>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d104      	bne.n	8001694 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_ADC_Init+0x1ac>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ce:	e018      	b.n	8001702 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f023 0312 	bic.w	r3, r3, #18
 80016d8:	f043 0210 	orr.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f0:	e007      	b.n	8001702 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffe1f7fd 	.word	0xffe1f7fd
 8001710:	ff1f0efe 	.word	0xff1f0efe

08001714 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_Start+0x1a>
 800172a:	2302      	movs	r3, #2
 800172c:	e098      	b.n	8001860 <HAL_ADC_Start+0x14c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fc6a 	bl	8002010 <ADC_Enable>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8087 	bne.w	8001856 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_ADC_Start+0x154>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d105      	bne.n	8001772 <HAL_ADC_Start+0x5e>
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_ADC_Start+0x158>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d115      	bne.n	800179e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	d026      	beq.n	80017da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001794:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179c:	e01d      	b.n	80017da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_ADC_Start+0x158>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Start+0xaa>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <HAL_ADC_Start+0x154>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10d      	bne.n	80017da <HAL_ADC_Start+0xc6>
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_ADC_Start+0x158>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f023 0206 	bic.w	r2, r3, #6
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f2:	e002      	b.n	80017fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f06f 0202 	mvn.w	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800181a:	d113      	bne.n	8001844 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_ADC_Start+0x154>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d105      	bne.n	8001832 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_ADC_Start+0x158>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	e00c      	b.n	800185e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	e003      	b.n	800185e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40012800 	.word	0x40012800
 800186c:	40012400 	.word	0x40012400

08001870 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001886:	f7ff fe63 	bl	8001550 <HAL_GetTick>
 800188a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0d3      	b.n	8001a5a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d131      	bne.n	8001924 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12a      	bne.n	8001924 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018ce:	e021      	b.n	8001914 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d6:	d01d      	beq.n	8001914 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_PollForConversion+0x7e>
 80018de:	f7ff fe37 	bl	8001550 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d212      	bcs.n	8001914 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f043 0204 	orr.w	r2, r3, #4
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0a2      	b.n	8001a5a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0d6      	beq.n	80018d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001922:	e070      	b.n	8001a06 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_ADC_PollForConversion+0x1f4>)
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	2002      	movs	r0, #2
 800192a:	f001 fe2f 	bl	800358c <HAL_RCCEx_GetPeriphCLKFreq>
 800192e:	4603      	mov	r3, r0
 8001930:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6919      	ldr	r1, [r3, #16]
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_ADC_PollForConversion+0x1f8>)
 800193c:	400b      	ands	r3, r1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_ADC_PollForConversion+0x104>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68d9      	ldr	r1, [r3, #12]
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <HAL_ADC_PollForConversion+0x1fc>)
 800194a:	400b      	ands	r3, r1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <HAL_ADC_PollForConversion+0x104>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6919      	ldr	r1, [r3, #16]
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_ADC_PollForConversion+0x200>)
 8001958:	400b      	ands	r3, r1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d108      	bne.n	8001970 <HAL_ADC_PollForConversion+0x100>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68d9      	ldr	r1, [r3, #12]
 8001964:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_ADC_PollForConversion+0x204>)
 8001966:	400b      	ands	r3, r1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_PollForConversion+0x100>
 800196c:	2314      	movs	r3, #20
 800196e:	e020      	b.n	80019b2 <HAL_ADC_PollForConversion+0x142>
 8001970:	2329      	movs	r3, #41	; 0x29
 8001972:	e01e      	b.n	80019b2 <HAL_ADC_PollForConversion+0x142>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_ADC_PollForConversion+0x200>)
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_ADC_PollForConversion+0x120>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_ADC_PollForConversion+0x204>)
 800198a:	400b      	ands	r3, r1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <HAL_ADC_PollForConversion+0x13c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6919      	ldr	r1, [r3, #16]
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_ADC_PollForConversion+0x208>)
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x140>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68d9      	ldr	r1, [r3, #12]
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_ADC_PollForConversion+0x208>)
 80019a6:	400b      	ands	r3, r1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x140>
 80019ac:	2354      	movs	r3, #84	; 0x54
 80019ae:	e000      	b.n	80019b2 <HAL_ADC_PollForConversion+0x142>
 80019b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019b8:	e021      	b.n	80019fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d01a      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_ADC_PollForConversion+0x168>
 80019c8:	f7ff fdc2 	bl	8001550 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d20f      	bcs.n	80019f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d90b      	bls.n	80019f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f043 0204 	orr.w	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e030      	b.n	8001a5a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d8d9      	bhi.n	80019ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f06f 0212 	mvn.w	r2, #18
 8001a0e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a2a:	d115      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000004 	.word	0x20000004
 8001a68:	24924924 	.word	0x24924924
 8001a6c:	00924924 	.word	0x00924924
 8001a70:	12492492 	.word	0x12492492
 8001a74:	00492492 	.word	0x00492492
 8001a78:	00249249 	.word	0x00249249

08001a7c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a64      	ldr	r2, [pc, #400]	; (8001c24 <HAL_ADC_Start_DMA+0x1a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0x24>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_ADC_Start_DMA+0x1ac>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_Start_DMA+0x32>
 8001aa0:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_ADC_Start_DMA+0x1a8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 80b3 	bne.w	8001c14 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_Start_DMA+0x40>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0ae      	b.n	8001c1a <HAL_ADC_Start_DMA+0x19e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 faa3 	bl	8002010 <ADC_Enable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 809a 	bne.w	8001c0a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_ADC_Start_DMA+0x1ac>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_Start_DMA+0x84>
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_ADC_Start_DMA+0x1a8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d115      	bne.n	8001b2c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d026      	beq.n	8001b68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b2a:	e01d      	b.n	8001b68 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_ADC_Start_DMA+0x1a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_Start_DMA+0xd0>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_ADC_Start_DMA+0x1ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d10d      	bne.n	8001b68 <HAL_ADC_Start_DMA+0xec>
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_ADC_Start_DMA+0x1a8>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	f023 0206 	bic.w	r2, r3, #6
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <HAL_ADC_Start_DMA+0x1b0>)
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_ADC_Start_DMA+0x1b4>)
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_ADC_Start_DMA+0x1b8>)
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0202 	mvn.w	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a18      	ldr	r0, [r3, #32]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	334c      	adds	r3, #76	; 0x4c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f000 fc8f 	bl	80024f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001be0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001be4:	d108      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bf4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bf6:	e00f      	b.n	8001c18 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c06:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c08:	e006      	b.n	8001c18 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c12:	e001      	b.n	8001c18 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40012400 	.word	0x40012400
 8001c28:	40012800 	.word	0x40012800
 8001c2c:	08002147 	.word	0x08002147
 8001c30:	080021c3 	.word	0x080021c3
 8001c34:	080021df 	.word	0x080021df

08001c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d140      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d139      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c9a:	d11d      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d119      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0220 	bic.w	r2, r2, #32
 8001cb2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f87c 	bl	8001dd6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0212 	mvn.w	r2, #18
 8001ce6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d14f      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d148      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d26:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d2a:	d012      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d125      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d48:	d11d      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fa43 	bl	8002212 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 020c 	mvn.w	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d114      	bne.n	8001dce <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10d      	bne.n	8001dce <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f81b 	bl	8001dfa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0201 	mvn.w	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x20>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0dc      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1da>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d81c      	bhi.n	8001e8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b05      	subs	r3, #5
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34
 8001e88:	e03c      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d81c      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b23      	subs	r3, #35	; 0x23
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4019      	ands	r1, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b23      	subs	r3, #35	; 0x23
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eca:	e01b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b41      	subs	r3, #65	; 0x41
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4019      	ands	r1, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	; 0x41
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d91c      	bls.n	8001f46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6898      	ldr	r0, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e019      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6919      	ldr	r1, [r3, #16]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	2207      	movs	r2, #7
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4019      	ands	r1, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f86:	2b11      	cmp	r3, #17
 8001f88:	d132      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d125      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40012400 	.word	0x40012400
 8002008:	20000004 	.word	0x20000004
 800200c:	431bde83 	.word	0x431bde83

08002010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d040      	beq.n	80020b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <ADC_Enable+0xac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <ADC_Enable+0xb0>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204c:	e002      	b.n	8002054 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3b01      	subs	r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f9      	bne.n	800204e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff fa79 	bl	8001550 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002060:	e01f      	b.n	80020a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002062:	f7ff fa75 	bl	8001550 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d918      	bls.n	80020a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d011      	beq.n	80020a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e007      	b.n	80020b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d1d8      	bne.n	8002062 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000004 	.word	0x20000004
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d12e      	bne.n	800213c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ee:	f7ff fa2f 	bl	8001550 <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f4:	e01b      	b.n	800212e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f6:	f7ff fa2b 	bl	8001550 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d914      	bls.n	800212e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10d      	bne.n	800212e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d0dc      	beq.n	80020f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800215c:	2b00      	cmp	r3, #0
 800215e:	d127      	bne.n	80021b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002176:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800217a:	d115      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fe14 	bl	8001dd6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021ae:	e004      	b.n	80021ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fe09 	bl	8001de8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fe01 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4906      	ldr	r1, [pc, #24]	; (80022bc <__NVIC_EnableIRQ+0x34>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f7ff ff90 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff2d 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff42 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff90 	bl	8002314 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5f 	bl	80022c0 <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff35 	bl	8002288 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e043      	b.n	80024de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_DMA_Init+0xa8>)
 800245e:	4413      	add	r3, r2
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_DMA_Init+0xac>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_DMA_Init+0xb0>)
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800248a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800248e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	bffdfff8 	.word	0xbffdfff8
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	40020000 	.word	0x40020000

080024f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_DMA_Start_IT+0x20>
 8002510:	2302      	movs	r3, #2
 8002512:	e04a      	b.n	80025aa <HAL_DMA_Start_IT+0xb6>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002522:	2b01      	cmp	r3, #1
 8002524:	d13a      	bne.n	800259c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f938 	bl	80027c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 020e 	orr.w	r2, r2, #14
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e00f      	b.n	800258a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0204 	bic.w	r2, r2, #4
 8002578:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 020a 	orr.w	r2, r2, #10
 8002588:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e005      	b.n	80025a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2204      	movs	r2, #4
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d04f      	beq.n	800267c <HAL_DMA_IRQHandler+0xc8>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d04a      	beq.n	800267c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a66      	ldr	r2, [pc, #408]	; (80027a4 <HAL_DMA_IRQHandler+0x1f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d029      	beq.n	8002662 <HAL_DMA_IRQHandler+0xae>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <HAL_DMA_IRQHandler+0xaa>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a63      	ldr	r2, [pc, #396]	; (80027ac <HAL_DMA_IRQHandler+0x1f8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01a      	beq.n	8002658 <HAL_DMA_IRQHandler+0xa4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a62      	ldr	r2, [pc, #392]	; (80027b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d012      	beq.n	8002652 <HAL_DMA_IRQHandler+0x9e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_DMA_IRQHandler+0x200>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00a      	beq.n	800264c <HAL_DMA_IRQHandler+0x98>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5f      	ldr	r2, [pc, #380]	; (80027b8 <HAL_DMA_IRQHandler+0x204>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_DMA_IRQHandler+0x92>
 8002640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002644:	e00e      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 8002646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800264a:	e00b      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 800264c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002650:	e008      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 8002652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002656:	e005      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 8002658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265c:	e002      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	e000      	b.n	8002664 <HAL_DMA_IRQHandler+0xb0>
 8002662:	2304      	movs	r3, #4
 8002664:	4a55      	ldr	r2, [pc, #340]	; (80027bc <HAL_DMA_IRQHandler+0x208>)
 8002666:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8094 	beq.w	800279a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800267a:	e08e      	b.n	800279a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2202      	movs	r2, #2
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d056      	beq.n	800273a <HAL_DMA_IRQHandler+0x186>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d051      	beq.n	800273a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 020a 	bic.w	r2, r2, #10
 80026b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <HAL_DMA_IRQHandler+0x1f0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d029      	beq.n	800271a <HAL_DMA_IRQHandler+0x166>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a37      	ldr	r2, [pc, #220]	; (80027a8 <HAL_DMA_IRQHandler+0x1f4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d022      	beq.n	8002716 <HAL_DMA_IRQHandler+0x162>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a35      	ldr	r2, [pc, #212]	; (80027ac <HAL_DMA_IRQHandler+0x1f8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01a      	beq.n	8002710 <HAL_DMA_IRQHandler+0x15c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a34      	ldr	r2, [pc, #208]	; (80027b0 <HAL_DMA_IRQHandler+0x1fc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d012      	beq.n	800270a <HAL_DMA_IRQHandler+0x156>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_DMA_IRQHandler+0x200>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00a      	beq.n	8002704 <HAL_DMA_IRQHandler+0x150>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a31      	ldr	r2, [pc, #196]	; (80027b8 <HAL_DMA_IRQHandler+0x204>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d102      	bne.n	80026fe <HAL_DMA_IRQHandler+0x14a>
 80026f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026fc:	e00e      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 80026fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002702:	e00b      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	e008      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 800270a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270e:	e005      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 8002710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002714:	e002      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 8002716:	2320      	movs	r3, #32
 8002718:	e000      	b.n	800271c <HAL_DMA_IRQHandler+0x168>
 800271a:	2302      	movs	r3, #2
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_DMA_IRQHandler+0x208>)
 800271e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d034      	beq.n	800279a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002738:	e02f      	b.n	800279a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2208      	movs	r2, #8
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_DMA_IRQHandler+0x1e8>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d023      	beq.n	800279c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
    }
  }
  return;
 800279a:	bf00      	nop
 800279c:	bf00      	nop
}
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020008 	.word	0x40020008
 80027a8:	4002001c 	.word	0x4002001c
 80027ac:	40020030 	.word	0x40020030
 80027b0:	40020044 	.word	0x40020044
 80027b4:	40020058 	.word	0x40020058
 80027b8:	4002006c 	.word	0x4002006c
 80027bc:	40020000 	.word	0x40020000

080027c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d108      	bne.n	8002800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027fe:	e007      	b.n	8002810 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
	...

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b08b      	sub	sp, #44	; 0x2c
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e169      	b.n	8002b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002830:	2201      	movs	r2, #1
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	429a      	cmp	r2, r3
 800284a:	f040 8158 	bne.w	8002afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a9a      	ldr	r2, [pc, #616]	; (8002abc <HAL_GPIO_Init+0x2a0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d05e      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002858:	4a98      	ldr	r2, [pc, #608]	; (8002abc <HAL_GPIO_Init+0x2a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d875      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800285e:	4a98      	ldr	r2, [pc, #608]	; (8002ac0 <HAL_GPIO_Init+0x2a4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d058      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002864:	4a96      	ldr	r2, [pc, #600]	; (8002ac0 <HAL_GPIO_Init+0x2a4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d86f      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800286a:	4a96      	ldr	r2, [pc, #600]	; (8002ac4 <HAL_GPIO_Init+0x2a8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d052      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002870:	4a94      	ldr	r2, [pc, #592]	; (8002ac4 <HAL_GPIO_Init+0x2a8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d869      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002876:	4a94      	ldr	r2, [pc, #592]	; (8002ac8 <HAL_GPIO_Init+0x2ac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d04c      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 800287c:	4a92      	ldr	r2, [pc, #584]	; (8002ac8 <HAL_GPIO_Init+0x2ac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d863      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002882:	4a92      	ldr	r2, [pc, #584]	; (8002acc <HAL_GPIO_Init+0x2b0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d046      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002888:	4a90      	ldr	r2, [pc, #576]	; (8002acc <HAL_GPIO_Init+0x2b0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d85d      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800288e:	2b12      	cmp	r3, #18
 8002890:	d82a      	bhi.n	80028e8 <HAL_GPIO_Init+0xcc>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d859      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <HAL_GPIO_Init+0x80>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	08002917 	.word	0x08002917
 80028a0:	080028f1 	.word	0x080028f1
 80028a4:	08002903 	.word	0x08002903
 80028a8:	08002945 	.word	0x08002945
 80028ac:	0800294b 	.word	0x0800294b
 80028b0:	0800294b 	.word	0x0800294b
 80028b4:	0800294b 	.word	0x0800294b
 80028b8:	0800294b 	.word	0x0800294b
 80028bc:	0800294b 	.word	0x0800294b
 80028c0:	0800294b 	.word	0x0800294b
 80028c4:	0800294b 	.word	0x0800294b
 80028c8:	0800294b 	.word	0x0800294b
 80028cc:	0800294b 	.word	0x0800294b
 80028d0:	0800294b 	.word	0x0800294b
 80028d4:	0800294b 	.word	0x0800294b
 80028d8:	0800294b 	.word	0x0800294b
 80028dc:	0800294b 	.word	0x0800294b
 80028e0:	080028f9 	.word	0x080028f9
 80028e4:	0800290d 	.word	0x0800290d
 80028e8:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_GPIO_Init+0x2b4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ee:	e02c      	b.n	800294a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e029      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	3304      	adds	r3, #4
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e024      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	3308      	adds	r3, #8
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e01f      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	330c      	adds	r3, #12
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e01a      	b.n	800294c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800291e:	2304      	movs	r3, #4
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e013      	b.n	800294c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	611a      	str	r2, [r3, #16]
          break;
 8002936:	e009      	b.n	800294c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002938:	2308      	movs	r3, #8
 800293a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	615a      	str	r2, [r3, #20]
          break;
 8002942:	e003      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e000      	b.n	800294c <HAL_GPIO_Init+0x130>
          break;
 800294a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d801      	bhi.n	8002956 <HAL_GPIO_Init+0x13a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	e001      	b.n	800295a <HAL_GPIO_Init+0x13e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2bff      	cmp	r3, #255	; 0xff
 8002960:	d802      	bhi.n	8002968 <HAL_GPIO_Init+0x14c>
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x152>
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3b08      	subs	r3, #8
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	210f      	movs	r1, #15
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	6a39      	ldr	r1, [r7, #32]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80b1 	beq.w	8002afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a4c      	ldr	r2, [pc, #304]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <HAL_GPIO_Init+0x2bc>)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a40      	ldr	r2, [pc, #256]	; (8002adc <HAL_GPIO_Init+0x2c0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_GPIO_Init+0x1ec>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <HAL_GPIO_Init+0x2c4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00d      	beq.n	8002a04 <HAL_GPIO_Init+0x1e8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <HAL_GPIO_Init+0x2c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <HAL_GPIO_Init+0x2cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_GPIO_Init+0x1e0>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e006      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e004      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e002      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4093      	lsls	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1a:	492f      	ldr	r1, [pc, #188]	; (8002ad8 <HAL_GPIO_Init+0x2bc>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	492c      	ldr	r1, [pc, #176]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4928      	ldr	r1, [pc, #160]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4922      	ldr	r1, [pc, #136]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	491e      	ldr	r1, [pc, #120]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4918      	ldr	r1, [pc, #96]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4914      	ldr	r1, [pc, #80]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d021      	beq.n	8002af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
 8002ab8:	e021      	b.n	8002afe <HAL_GPIO_Init+0x2e2>
 8002aba:	bf00      	nop
 8002abc:	10320000 	.word	0x10320000
 8002ac0:	10310000 	.word	0x10310000
 8002ac4:	10220000 	.word	0x10220000
 8002ac8:	10210000 	.word	0x10210000
 8002acc:	10120000 	.word	0x10120000
 8002ad0:	10110000 	.word	0x10110000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40010800 	.word	0x40010800
 8002ae0:	40010c00 	.word	0x40010c00
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4909      	ldr	r1, [pc, #36]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f47f ae8e 	bne.w	8002830 <HAL_GPIO_Init+0x14>
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	372c      	adds	r7, #44	; 0x2c
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b62:	787b      	ldrb	r3, [r7, #1]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b6e:	e003      	b.n	8002b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	041a      	lsls	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f806 	bl	8002bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e272      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be8:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d00c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf4:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d112      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x12c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d168      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e24c      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x76>
 8002c30:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b7b      	ldr	r3, [pc, #492]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7a      	ldr	r2, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a77      	ldr	r2, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0xbc>
 8002c6a:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a71      	ldr	r2, [pc, #452]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c84:	4b6b      	ldr	r3, [pc, #428]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fc54 	bl	8001550 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fc50 	bl	8001550 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e200      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xe4>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fc40 	bl	8001550 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fc3c 	bl	8001550 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1ec      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x10c>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x18c>
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x176>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1c0      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4939      	ldr	r1, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fbf5 	bl	8001550 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fbf1 	bl	8001550 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1a1      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4927      	ldr	r1, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fbd4 	bl	8001550 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe fbd0 	bl	8001550 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e180      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03a      	beq.n	8002e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe fbb4 	bl	8001550 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fbb0 	bl	8001550 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e160      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f000 fae4 	bl	80033d8 <RCC_Delay>
 8002e10:	e01c      	b.n	8002e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe fb9a 	bl	8001550 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fb96 	bl	8001550 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d908      	bls.n	8002e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e146      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	42420000 	.word	0x42420000
 8002e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	4b92      	ldr	r3, [pc, #584]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e9      	bne.n	8002e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a6 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a87      	ldr	r2, [pc, #540]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b85      	ldr	r3, [pc, #532]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b82      	ldr	r3, [pc, #520]	; (8003090 <HAL_RCC_OscConfig+0x4c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d118      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b7f      	ldr	r3, [pc, #508]	; (8003090 <HAL_RCC_OscConfig+0x4c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7e      	ldr	r2, [pc, #504]	; (8003090 <HAL_RCC_OscConfig+0x4c8>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fb57 	bl	8001550 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe fb53 	bl	8001550 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	; 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e103      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b75      	ldr	r3, [pc, #468]	; (8003090 <HAL_RCC_OscConfig+0x4c8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x312>
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a6e      	ldr	r2, [pc, #440]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e02d      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a69      	ldr	r2, [pc, #420]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a66      	ldr	r2, [pc, #408]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	e01c      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x356>
 8002f04:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a60      	ldr	r2, [pc, #384]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	4b5e      	ldr	r3, [pc, #376]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a5d      	ldr	r2, [pc, #372]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002f1e:	4b5b      	ldr	r3, [pc, #364]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fb07 	bl	8001550 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fb03 	bl	8001550 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0b1      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ee      	beq.n	8002f46 <HAL_RCC_OscConfig+0x37e>
 8002f68:	e014      	b.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe faf1 	bl	8001550 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe faed 	bl	8001550 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e09b      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ee      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9a:	4b3c      	ldr	r3, [pc, #240]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a3b      	ldr	r2, [pc, #236]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8087 	beq.w	80030be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d061      	beq.n	8003080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d146      	bne.n	8003052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fac1 	bl	8001550 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fabd 	bl	8001550 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e06d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d108      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4921      	ldr	r1, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a19      	ldr	r1, [r3, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	430b      	orrs	r3, r1
 800301e:	491b      	ldr	r1, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4cc>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fa91 	bl	8001550 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fa8d 	bl	8001550 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x46a>
 8003050:	e035      	b.n	80030be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fa7a 	bl	8001550 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fa76 	bl	8001550 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e026      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_OscConfig+0x4c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x498>
 800307e:	e01e      	b.n	80030be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e019      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x500>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000

080030cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0d0      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b6a      	ldr	r3, [pc, #424]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 0207 	bic.w	r2, r3, #7
 80030f6:	4965      	ldr	r1, [pc, #404]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b8      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800314a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	494d      	ldr	r1, [pc, #308]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d040      	beq.n	80031ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e073      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4936      	ldr	r1, [pc, #216]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fe f9c8 	bl	8001550 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fe f9c4 	bl	8001550 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e053      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d210      	bcs.n	800321c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4922      	ldr	r1, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e032      	b.n	8003282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4916      	ldr	r1, [pc, #88]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f82d 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	490a      	ldr	r1, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1cc>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1d0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f926 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40022000 	.word	0x40022000
 8003290:	40021000 	.word	0x40021000
 8003294:	08004710 	.word	0x08004710
 8003298:	20000004 	.word	0x20000004
 800329c:	20000008 	.word	0x20000008

080032a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_RCC_EnableCSS+0x14>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	4242004c 	.word	0x4242004c

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b490      	push	{r4, r7}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_GetSysClockFreq+0xac>)
 80032c0:	1d3c      	adds	r4, r7, #4
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032c8:	f240 2301 	movw	r3, #513	; 0x201
 80032cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x46>
 80032f6:	e02b      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	e02b      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3328      	adds	r3, #40	; 0x28
 8003308:	443b      	add	r3, r7
 800330a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800330e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c5b      	lsrs	r3, r3, #17
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	3328      	adds	r3, #40	; 0x28
 8003326:	443b      	add	r3, r7
 8003328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800332c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e004      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	623b      	str	r3, [r7, #32]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003352:	623b      	str	r3, [r7, #32]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6a3b      	ldr	r3, [r7, #32]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc90      	pop	{r4, r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	080046f0 	.word	0x080046f0
 8003368:	40021000 	.word	0x40021000
 800336c:	007a1200 	.word	0x007a1200
 8003370:	003d0900 	.word	0x003d0900

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <HAL_RCC_GetHCLKFreq+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000004 	.word	0x20000004

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	f7ff fff2 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0adb      	lsrs	r3, r3, #11
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08004720 	.word	0x08004720

080033b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d104      	bne.n	80033ca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80033c0:	f000 f828 	bl	8003414 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	701a      	strb	r2, [r3, #0]
  }
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	4002100a 	.word	0x4002100a

080033d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCC_Delay+0x34>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <RCC_Delay+0x38>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a5b      	lsrs	r3, r3, #9
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f4:	bf00      	nop
  }
  while (Delay --);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	60fa      	str	r2, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <RCC_Delay+0x1c>
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000004 	.word	0x20000004
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07d      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	61d3      	str	r3, [r2, #28]
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fe f866 	bl	8001550 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe f862 	bl	8001550 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e06d      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d027      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d4:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe f831 	bl	8001550 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe f82d 	bl	8001550 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e036      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ee      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4917      	ldr	r1, [pc, #92]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	4313      	orrs	r3, r2
 8003524:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
 8003588:	42420440 	.word	0x42420440

0800358c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b08d      	sub	sp, #52	; 0x34
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003596:	f107 040c 	add.w	r4, r7, #12
 800359a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800359c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035a0:	f240 2301 	movw	r3, #513	; 0x201
 80035a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	2300      	movs	r3, #0
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	f200 808e 	bhi.w	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d049      	beq.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d079      	beq.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035d4:	e086      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035dc:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d07f      	beq.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	3330      	adds	r3, #48	; 0x30
 80035f2:	443b      	add	r3, r7
 80035f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035f8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c5b      	lsrs	r3, r3, #17
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	3330      	adds	r3, #48	; 0x30
 8003610:	443b      	add	r3, r7
 8003612:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003622:	4a37      	ldr	r2, [pc, #220]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	fbb2 f2f3 	udiv	r2, r2, r3
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	e004      	b.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	4a33      	ldr	r2, [pc, #204]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800363e:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d102      	bne.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003650:	e04a      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003660:	e042      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d108      	bne.n	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
 8003684:	e01f      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003690:	d109      	bne.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800369e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b0:	d11c      	bne.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80036be:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036c4:	e012      	b.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036c8:	f7ff fe5e 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	0b9b      	lsrs	r3, r3, #14
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	3301      	adds	r3, #1
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036e2:	e004      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80036ec:	bf00      	nop
    }
  }
  return (frequency);
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3734      	adds	r7, #52	; 0x34
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	08004700 	.word	0x08004700
 80036fc:	40021000 	.word	0x40021000
 8003700:	007a1200 	.word	0x007a1200
 8003704:	003d0900 	.word	0x003d0900
 8003708:	aaaaaaab 	.word	0xaaaaaaab

0800370c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e041      	b.n	80037a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fbc4 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f000 fc32 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d001      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e03a      	b.n	800383a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_TIM_Base_Start_IT+0x98>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x58>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d009      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x58>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_TIM_Base_Start_IT+0x9c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x58>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_TIM_Base_Start_IT+0xa0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d111      	bne.n	8003828 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b06      	cmp	r3, #6
 8003814:	d010      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	e007      	b.n	8003838 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800

08003850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e041      	b.n	80038e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f839 	bl	80038ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fb90 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_TIM_PWM_Start+0x24>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e022      	b.n	800396a <HAL_TIM_PWM_Start+0x6a>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d109      	bne.n	800393e <HAL_TIM_PWM_Start+0x3e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e015      	b.n	800396a <HAL_TIM_PWM_Start+0x6a>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d109      	bne.n	8003958 <HAL_TIM_PWM_Start+0x58>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e008      	b.n	800396a <HAL_TIM_PWM_Start+0x6a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e05e      	b.n	8003a30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start+0x82>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	e013      	b.n	80039aa <HAL_TIM_PWM_Start+0xaa>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start+0x92>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	e00b      	b.n	80039aa <HAL_TIM_PWM_Start+0xaa>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0xa2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	e003      	b.n	80039aa <HAL_TIM_PWM_Start+0xaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fd7e 	bl	80044b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <HAL_TIM_PWM_Start+0x138>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_PWM_Start+0x138>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_TIM_PWM_Start+0xfa>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d009      	beq.n	80039fa <HAL_TIM_PWM_Start+0xfa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_TIM_PWM_Start+0x13c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIM_PWM_Start+0xfa>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_TIM_PWM_Start+0x140>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d111      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d010      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1c:	e007      	b.n	8003a2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0202 	mvn.w	r2, #2
 8003a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa78 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa6b 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa7a 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa4e 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa41 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa50 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0208 	mvn.w	r2, #8
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa24 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa17 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa26 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0210 	mvn.w	r2, #16
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2208      	movs	r2, #8
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9fa 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9ed 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9fc 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0201 	mvn.w	r2, #1
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9c8 	bl	8003f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fd3c 	bl	800466c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9c0 	bl	8003fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0220 	mvn.w	r2, #32
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fd07 	bl	800465a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0ac      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	f200 809f 	bhi.w	8003dbc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003dbd 	.word	0x08003dbd
 8003c8c:	08003dbd 	.word	0x08003dbd
 8003c90:	08003dbd 	.word	0x08003dbd
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003dbd 	.word	0x08003dbd
 8003c9c:	08003dbd 	.word	0x08003dbd
 8003ca0:	08003dbd 	.word	0x08003dbd
 8003ca4:	08003d3b 	.word	0x08003d3b
 8003ca8:	08003dbd 	.word	0x08003dbd
 8003cac:	08003dbd 	.word	0x08003dbd
 8003cb0:	08003dbd 	.word	0x08003dbd
 8003cb4:	08003d7b 	.word	0x08003d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f9da 	bl	8004078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	619a      	str	r2, [r3, #24]
      break;
 8003cf6:	e062      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa20 	bl	8004144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	619a      	str	r2, [r3, #24]
      break;
 8003d38:	e041      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fa69 	bl	8004218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0208 	orr.w	r2, r2, #8
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
      break;
 8003d78:	e021      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fab3 	bl	80042ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	61da      	str	r2, [r3, #28]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_ConfigClockSource+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e0b3      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x180>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e20:	d03e      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0xd0>
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e26:	f200 8087 	bhi.w	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	f000 8085 	beq.w	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	d87f      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e38:	2b70      	cmp	r3, #112	; 0x70
 8003e3a:	d01a      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xa2>
 8003e3c:	2b70      	cmp	r3, #112	; 0x70
 8003e3e:	d87b      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e40:	2b60      	cmp	r3, #96	; 0x60
 8003e42:	d050      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x116>
 8003e44:	2b60      	cmp	r3, #96	; 0x60
 8003e46:	d877      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xf6>
 8003e4c:	2b50      	cmp	r3, #80	; 0x50
 8003e4e:	d873      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d058      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x136>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d86f      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d064      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x156>
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	d86b      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d060      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x156>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d867      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05c      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x156>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d05a      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e70:	e062      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f000 faf8 	bl	8004476 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	609a      	str	r2, [r3, #8]
      break;
 8003e9e:	e04e      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f000 fae1 	bl	8004476 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec2:	609a      	str	r2, [r3, #8]
      break;
 8003ec4:	e03b      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 fa58 	bl	8004388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2150      	movs	r1, #80	; 0x50
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 faaf 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e02b      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 fa76 	bl	80043e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2160      	movs	r1, #96	; 0x60
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fa9f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003f04:	e01b      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 fa38 	bl	8004388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fa8f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e00b      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 fa86 	bl	8004442 <TIM_ITRx_SetConfig>
        break;
 8003f36:	e002      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a29      	ldr	r2, [pc, #164]	; (800406c <TIM_Base_SetConfig+0xb8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_Base_SetConfig+0x30>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x30>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a26      	ldr	r2, [pc, #152]	; (8004070 <TIM_Base_SetConfig+0xbc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x30>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_Base_SetConfig+0xc0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <TIM_Base_SetConfig+0xb8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_Base_SetConfig+0x62>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d007      	beq.n	8004016 <TIM_Base_SetConfig+0x62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a19      	ldr	r2, [pc, #100]	; (8004070 <TIM_Base_SetConfig+0xbc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_Base_SetConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a18      	ldr	r2, [pc, #96]	; (8004074 <TIM_Base_SetConfig+0xc0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <TIM_Base_SetConfig+0xb8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d103      	bne.n	800405c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	615a      	str	r2, [r3, #20]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800

08004078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <TIM_OC1_SetConfig+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10c      	bne.n	80040ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0308 	bic.w	r3, r3, #8
 80040da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a13      	ldr	r2, [pc, #76]	; (8004140 <TIM_OC1_SetConfig+0xc8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d111      	bne.n	800411a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00

08004144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0320 	bic.w	r3, r3, #32
 800418e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <TIM_OC2_SetConfig+0xd0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10d      	bne.n	80041c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <TIM_OC2_SetConfig+0xd0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d113      	bne.n	80041f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	40012c00 	.word	0x40012c00

08004218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <TIM_OC3_SetConfig+0xd0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <TIM_OC3_SetConfig+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d113      	bne.n	80042c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00

080042ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <TIM_OC4_SetConfig+0x98>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00

08004388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 030a 	bic.w	r3, r3, #10
 80043c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 0210 	bic.w	r2, r3, #16
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800440e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	031b      	lsls	r3, r3, #12
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	621a      	str	r2, [r3, #32]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	f043 0307 	orr.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004490:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	431a      	orrs	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4313      	orrs	r3, r2
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2201      	movs	r2, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	401a      	ands	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e046      	b.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a16      	ldr	r2, [pc, #88]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d009      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10c      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800

080045b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e03d      	b.n	8004650 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
	...

08004680 <__libc_init_array>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	2600      	movs	r6, #0
 8004684:	4d0c      	ldr	r5, [pc, #48]	; (80046b8 <__libc_init_array+0x38>)
 8004686:	4c0d      	ldr	r4, [pc, #52]	; (80046bc <__libc_init_array+0x3c>)
 8004688:	1b64      	subs	r4, r4, r5
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	42a6      	cmp	r6, r4
 800468e:	d109      	bne.n	80046a4 <__libc_init_array+0x24>
 8004690:	f000 f822 	bl	80046d8 <_init>
 8004694:	2600      	movs	r6, #0
 8004696:	4d0a      	ldr	r5, [pc, #40]	; (80046c0 <__libc_init_array+0x40>)
 8004698:	4c0a      	ldr	r4, [pc, #40]	; (80046c4 <__libc_init_array+0x44>)
 800469a:	1b64      	subs	r4, r4, r5
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	42a6      	cmp	r6, r4
 80046a0:	d105      	bne.n	80046ae <__libc_init_array+0x2e>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a8:	4798      	blx	r3
 80046aa:	3601      	adds	r6, #1
 80046ac:	e7ee      	b.n	800468c <__libc_init_array+0xc>
 80046ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b2:	4798      	blx	r3
 80046b4:	3601      	adds	r6, #1
 80046b6:	e7f2      	b.n	800469e <__libc_init_array+0x1e>
 80046b8:	08004728 	.word	0x08004728
 80046bc:	08004728 	.word	0x08004728
 80046c0:	08004728 	.word	0x08004728
 80046c4:	0800472c 	.word	0x0800472c

080046c8 <memset>:
 80046c8:	4603      	mov	r3, r0
 80046ca:	4402      	add	r2, r0
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d100      	bne.n	80046d2 <memset+0xa>
 80046d0:	4770      	bx	lr
 80046d2:	f803 1b01 	strb.w	r1, [r3], #1
 80046d6:	e7f9      	b.n	80046cc <memset+0x4>

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
